/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	PRINT_OPTIONS = "Print_options_version 6\
range_start 0ps\
range_end 1.0us\
width 1\
names_percentage 25\
comments 1\
grid_lines 1\
time_bars 1\
name_every_page 0\
expand_groups 0\
print_all 1\
print_row_height 100";
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 1000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("address[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("address[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("address[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("address[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("address[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("address[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("address[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("control[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("control[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("control[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("control[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("control[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("control[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("control[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("control[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("control[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("control[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ram_mem[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ram_mem[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ram_mem[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ram_mem[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ram_mem[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ram_mem[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ram_mem[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ram_mem[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ram_mem[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ram_mem[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("control[10]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

GROUP("address")
{
	MEMBERS = "address[6]", "address[5]", "address[4]", "address[3]", "address[2]", "address[1]", "address[0]";
}

GROUP("data")
{
	MEMBERS = "data[9]", "data[8]", "data[7]", "data[6]", "data[5]", "data[4]", "data[3]", "data[2]", "data[1]", "data[0]";
}

GROUP("ram_mem")
{
	MEMBERS = "ram_mem[9]", "ram_mem[8]", "ram_mem[7]", "ram_mem[6]", "ram_mem[5]", "ram_mem[4]", "ram_mem[3]", "ram_mem[2]", "ram_mem[1]", "ram_mem[0]";
}

GROUP("control")
{
	MEMBERS = "control[10]", "control[9]", "control[8]", "control[7]", "control[6]", "control[5]", "control[4]", "control[3]", "control[2]", "control[1]", "control[0]";
}

TRANSITION_LIST("address[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 0.5;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 2.0;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 3.0;
				NODE
				{
					REPEAT = 3;
					LEVEL 0 FOR 2.0;
					LEVEL Z FOR 1.0;
				}
			}
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 2.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 3.0;
		}
		NODE
		{
			REPEAT = 24;
			NODE
			{
				REPEAT = 3;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 2.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 3.0;
		}
		NODE
		{
			REPEAT = 24;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 2.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 3.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 0.5;
	}
}

TRANSITION_LIST("address[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 0.5;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 2.0;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 3.0;
				NODE
				{
					REPEAT = 3;
					LEVEL 0 FOR 2.0;
					LEVEL Z FOR 1.0;
				}
			}
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 2.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 3.0;
		}
		NODE
		{
			REPEAT = 8;
			NODE
			{
				REPEAT = 3;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 2.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 3.0;
		}
		NODE
		{
			REPEAT = 16;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 2.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 3.0;
		}
		NODE
		{
			REPEAT = 16;
			NODE
			{
				REPEAT = 3;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 2.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 3.0;
		}
		NODE
		{
			REPEAT = 8;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 2.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 3.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 0.5;
	}
}

TRANSITION_LIST("address[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 0.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 3.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 2.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 3.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
		}
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 8;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 2.0;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 3.0;
				NODE
				{
					REPEAT = 2;
					LEVEL 1 FOR 2.0;
					LEVEL Z FOR 1.0;
				}
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			NODE
			{
				REPEAT = 8;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 2.0;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 3.0;
				NODE
				{
					REPEAT = 3;
					LEVEL 0 FOR 2.0;
					LEVEL Z FOR 1.0;
				}
			}
		}
		NODE
		{
			REPEAT = 8;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 2.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 3.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		NODE
		{
			REPEAT = 8;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 2.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 3.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 2.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 3.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 0.5;
	}
}

TRANSITION_LIST("address[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 0.5;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		NODE
		{
			REPEAT = 6;
			NODE
			{
				REPEAT = 4;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 2.0;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 3.0;
				NODE
				{
					REPEAT = 3;
					LEVEL 1 FOR 2.0;
					LEVEL Z FOR 1.0;
				}
			}
			NODE
			{
				REPEAT = 4;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 2.0;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 3.0;
				NODE
				{
					REPEAT = 2;
					LEVEL 0 FOR 2.0;
					LEVEL Z FOR 1.0;
				}
				LEVEL 1 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
		}
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 2.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 3.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 2.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 3.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 0.5;
	}
}

TRANSITION_LIST("address[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 0.5;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 3.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		NODE
		{
			REPEAT = 12;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 2.0;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 3.0;
				NODE
				{
					REPEAT = 3;
					LEVEL 1 FOR 2.0;
					LEVEL Z FOR 1.0;
				}
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 2.0;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 3.0;
				NODE
				{
					REPEAT = 2;
					LEVEL 0 FOR 2.0;
					LEVEL Z FOR 1.0;
				}
				LEVEL 1 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
		}
		LEVEL 0 FOR 0.5;
	}
}

TRANSITION_LIST("address[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 0.5;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 3.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 0.5;
	}
}

TRANSITION_LIST("address[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 0.5;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL Z FOR 2.0;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 4;
			LEVEL Z FOR 3.0;
			LEVEL 0 FOR 2.0;
			NODE
			{
				REPEAT = 3;
				LEVEL Z FOR 1.0;
				LEVEL 1 FOR 2.0;
			}
			LEVEL Z FOR 2.0;
			LEVEL 1 FOR 2.0;
		}
		NODE
		{
			REPEAT = 50;
			LEVEL Z FOR 3.0;
			LEVEL 0 FOR 2.0;
			NODE
			{
				REPEAT = 2;
				LEVEL Z FOR 1.0;
				LEVEL 1 FOR 2.0;
			}
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 2.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL Z FOR 3.0;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 1.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 0.5;
	}
}

TRANSITION_LIST("data[9]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 1.5;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 13.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 4.0;
			LEVEL 1 FOR 2.0;
			NODE
			{
				REPEAT = 4;
				LEVEL Z FOR 1.0;
				LEVEL 0 FOR 2.0;
			}
		}
		LEVEL Z FOR 4.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 4;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		NODE
		{
			REPEAT = 48;
			LEVEL Z FOR 4.0;
			NODE
			{
				REPEAT = 4;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
		}
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 0.5;
	}
}

TRANSITION_LIST("data[8]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 1.5;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 13.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 13.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 4.0;
			NODE
			{
				REPEAT = 4;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 48;
			LEVEL Z FOR 4.0;
			NODE
			{
				REPEAT = 4;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
		}
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 0.5;
	}
}

TRANSITION_LIST("data[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 1.5;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 13.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		NODE
		{
			REPEAT = 50;
			LEVEL Z FOR 4.0;
			NODE
			{
				REPEAT = 4;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
		}
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 0.5;
	}
}

TRANSITION_LIST("data[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 1.5;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 13.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		NODE
		{
			REPEAT = 50;
			LEVEL Z FOR 4.0;
			NODE
			{
				REPEAT = 4;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
		}
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 0.5;
	}
}

TRANSITION_LIST("data[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 1.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 13.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		NODE
		{
			REPEAT = 50;
			LEVEL Z FOR 4.0;
			NODE
			{
				REPEAT = 4;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
		}
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 0.5;
	}
}

TRANSITION_LIST("data[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 1.5;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 13.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 4.0;
			NODE
			{
				REPEAT = 4;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
		}
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		NODE
		{
			REPEAT = 46;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 4.0;
			NODE
			{
				REPEAT = 4;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 0.5;
	}
}

TRANSITION_LIST("data[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 1.5;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 13.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 13.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 1.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 1.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 1.0;
		NODE
		{
			REPEAT = 46;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 4.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 0.5;
	}
}

TRANSITION_LIST("data[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 1.5;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 13.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 4.0;
			LEVEL 1 FOR 2.0;
			NODE
			{
				REPEAT = 4;
				LEVEL Z FOR 1.0;
				LEVEL 0 FOR 2.0;
			}
		}
		NODE
		{
			REPEAT = 48;
			LEVEL Z FOR 4.0;
			NODE
			{
				REPEAT = 4;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
		}
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 0.5;
	}
}

TRANSITION_LIST("data[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 1.5;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 13.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL Z FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		NODE
		{
			REPEAT = 50;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 4.0;
			NODE
			{
				REPEAT = 4;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 0.5;
	}
}

TRANSITION_LIST("data[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 1.5;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 13.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 1.0;
			LEVEL 1 FOR 2.0;
		}
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL Z FOR 1.0;
		LEVEL 1 FOR 2.0;
		NODE
		{
			REPEAT = 48;
			LEVEL Z FOR 4.0;
			NODE
			{
				REPEAT = 4;
				LEVEL 0 FOR 2.0;
				LEVEL Z FOR 1.0;
			}
			LEVEL 0 FOR 2.0;
		}
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 4.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2.0;
			LEVEL Z FOR 1.0;
		}
		LEVEL 0 FOR 2.0;
		LEVEL Z FOR 0.5;
	}
}

TRANSITION_LIST("control[9]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 2.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 45.0;
		NODE
		{
			REPEAT = 52;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 2.0;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 9.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 0.5;
	}
}

TRANSITION_LIST("control[8]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 14.5;
		NODE
		{
			REPEAT = 54;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 16.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 11.5;
	}
}

TRANSITION_LIST("control[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 0.5;
		NODE
		{
			REPEAT = 55;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 17.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 8.5;
	}
}

TRANSITION_LIST("control[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 24.5;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 16.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 34.0;
		NODE
		{
			REPEAT = 51;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 16.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.5;
	}
}

TRANSITION_LIST("control[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 6.5;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 991.5;
	}
}

TRANSITION_LIST("control[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 60.5;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 937.5;
	}
}

TRANSITION_LIST("control[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("control[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 85.5;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 16.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 876.5;
	}
}

TRANSITION_LIST("control[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 67.5;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 930.5;
	}
}

TRANSITION_LIST("control[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 62.5;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 2;
				LEVEL 1 FOR 1.0;
				LEVEL 0 FOR 2.0;
			}
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 11.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 11.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1.0;
			LEVEL 0 FOR 2.0;
		}
		LEVEL 1 FOR 1.0;
		LEVEL 0 FOR 876.5;
	}
}

TRANSITION_LIST("ram_mem[9]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 61.5;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 935.5;
	}
}

TRANSITION_LIST("ram_mem[8]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 61.5;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 58.0;
		LEVEL 1 FOR 11.0;
		LEVEL 0 FOR 866.5;
	}
}

TRANSITION_LIST("ram_mem[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 61.5;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 935.5;
	}
}

TRANSITION_LIST("ram_mem[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 61.5;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 935.5;
	}
}

TRANSITION_LIST("ram_mem[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 7.5;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 935.5;
	}
}

TRANSITION_LIST("ram_mem[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 61.5;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 22.0;
		LEVEL 1 FOR 11.0;
		LEVEL 0 FOR 39.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 859.5;
	}
}

TRANSITION_LIST("ram_mem[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10.5;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 47.0;
		LEVEL 1 FOR 21.0;
		LEVEL 0 FOR 15.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 7.0;
			LEVEL 0 FOR 11.0;
		}
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 4.0;
		LEVEL 1 FOR 859.5;
	}
}

TRANSITION_LIST("ram_mem[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 61.5;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 935.5;
	}
}

TRANSITION_LIST("ram_mem[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 61.5;
		LEVEL 1 FOR 3.0;
		LEVEL 0 FOR 18.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 913.5;
	}
}

TRANSITION_LIST("ram_mem[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10.5;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 47.0;
		LEVEL 1 FOR 18.0;
		LEVEL 0 FOR 3.0;
		LEVEL 1 FOR 4.0;
		LEVEL 0 FOR 14.0;
		LEVEL 1 FOR 15.0;
		LEVEL 0 FOR 884.5;
	}
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1000;
			LEVEL 0 FOR 0.5;
			LEVEL 1 FOR 0.5;
		}
	}
}

TRANSITION_LIST("control[10]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1.5;
		NODE
		{
			REPEAT = 55;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 1.0;
			LEVEL 1 FOR 2.0;
			LEVEL 0 FOR 13.0;
		}
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 1.0;
		LEVEL 1 FOR 2.0;
		LEVEL 0 FOR 3.5;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "address";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3, 4, 5, 6, 7, 8;
}

DISPLAY_LINE
{
	CHANNEL = "address[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "address[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "address[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "address[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "address[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "address[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "address[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "control";
	EXPAND_STATUS = EXPANDED;
	RADIX = Hexadecimal;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
	CHILDREN = 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20;
}

DISPLAY_LINE
{
	CHANNEL = "control[10]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "control[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "control[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "control[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "control[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "control[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "control[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "control[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "control[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "control[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "control[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "data";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 21;
	TREE_LEVEL = 0;
	CHILDREN = 22, 23, 24, 25, 26, 27, 28, 29, 30, 31;
}

DISPLAY_LINE
{
	CHANNEL = "data[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "data[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "data[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "data[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "data[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "data[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "data[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 28;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "data[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 29;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "data[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 30;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "data[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 31;
	TREE_LEVEL = 1;
	PARENT = 21;
}

DISPLAY_LINE
{
	CHANNEL = "ram_mem";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 32;
	TREE_LEVEL = 0;
	CHILDREN = 33, 34, 35, 36, 37, 38, 39, 40, 41, 42;
}

DISPLAY_LINE
{
	CHANNEL = "ram_mem[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 33;
	TREE_LEVEL = 1;
	PARENT = 32;
}

DISPLAY_LINE
{
	CHANNEL = "ram_mem[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 34;
	TREE_LEVEL = 1;
	PARENT = 32;
}

DISPLAY_LINE
{
	CHANNEL = "ram_mem[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 35;
	TREE_LEVEL = 1;
	PARENT = 32;
}

DISPLAY_LINE
{
	CHANNEL = "ram_mem[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 36;
	TREE_LEVEL = 1;
	PARENT = 32;
}

DISPLAY_LINE
{
	CHANNEL = "ram_mem[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 37;
	TREE_LEVEL = 1;
	PARENT = 32;
}

DISPLAY_LINE
{
	CHANNEL = "ram_mem[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 38;
	TREE_LEVEL = 1;
	PARENT = 32;
}

DISPLAY_LINE
{
	CHANNEL = "ram_mem[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 39;
	TREE_LEVEL = 1;
	PARENT = 32;
}

DISPLAY_LINE
{
	CHANNEL = "ram_mem[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 40;
	TREE_LEVEL = 1;
	PARENT = 32;
}

DISPLAY_LINE
{
	CHANNEL = "ram_mem[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 41;
	TREE_LEVEL = 1;
	PARENT = 32;
}

DISPLAY_LINE
{
	CHANNEL = "ram_mem[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 42;
	TREE_LEVEL = 1;
	PARENT = 32;
}

TIME_BAR
{
	TIME = 24300;
	MASTER = TRUE;
}
;
